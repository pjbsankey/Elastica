// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {FunctionsClient} from "@chainlink/contracts@0.8.0/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol";
import {ConfirmedOwner} from "@chainlink/contracts@0.8.0/src/v0.8/shared/access/ConfirmedOwner.sol";
import {FunctionsRequest} from "@chainlink/contracts@0.8.0/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol";


/**
 * @title GettingStartedFunctionsConsumer
 * @notice This is an example contract to show how to make HTTP requests using Chainlink
 * @dev This contract uses hardcoded values and should not be used in production.
 */
contract USTreasuryYield is FunctionsClient, ConfirmedOwner {
    using FunctionsRequest for FunctionsRequest.Request;

    // State variables to store the last request ID, response, and error
    bytes32 public s_lastRequestId;
    bytes public s_lastResponse;
    bytes public s_lastError;

    // Custom error type
    error UnexpectedRequestID(bytes32 requestId);

    // Event to log responses
    event Response(
        bytes32 indexed requestId,
        string TreasuryYield,
        bytes response,
        bytes err
    );

    // Router address - Hardcoded for Sepolia
    // Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks
    address router = 0xb83E47C2bC239B3bf370bc41e1459A34b41238D0;

    // JavaScript source code
    // This function retrieves the latest released yield of the US X Year Treasury from the AlphaVantage API given a specific interval or maturity.
    // Maturity timelines: 3month, 2year, 5year, 7year, 10year, 30year
    // Interval options: daily, weekly, monthly
    string source = 
    "const maturity = args[0]"
    "const interval = args[1]"
    "if (!secrets.apiKey) {"
        "throw Error('Need to set Alpha Vantage API key');"
     "   }"

// make HTTP request
"const url = `https://www.alphavantage.co/query?function=TREASURY_YIELD`"
"console.log(`HTTP GET Request to ${url}&interval=${interval}&maturity=${maturity}`)"

// construct the HTTP Request object. See: https://github.com/smartcontractkit/functions-hardhat-starter-kit#javascript-code
// params used for URL query parameters
"const alphavantageRequest = Functions.makeHttpRequest({"
  "url: url,"
  "params: {"
    "interval: interval,"
    "maturity: maturity,"
    "apikey: secrets.apiKey"
  "},"
"})"

// Execute the API request (Promise)
"const alphavantageResponse = await alphavantageRequest"
"if (alphavantageResponse.error) {"
  "console.error(alphavantageResponse.error)"
 "throw Error('Request failed')"
"}"

"const data = alphavantageResponse['data']"
"console.log(data);"
// Gets the latest yield rate in the array of returned data values
"const floatingRate = data.data[0].value;"

"if (data.Response === 'Error') {"
  "console.error(data.Message)"
  "throw Error(`Functional error. Read message: ${data.Message}`)"
"}"

// Solidity doesn't support decimals so multiply by 100 and round to the nearest integer
// Use Functions.encodeUint256 to encode an unsigned integer to a Buffer
"return Functions.encodeUint256(Math.round(floatingRate * 100))";


    //Callback gas limit
    uint32 gasLimit = 300000;

    // donID - Hardcoded for Sepolia
    // Check to get the donID for your supported network https://docs.chain.link/chainlink-functions/supported-networks
    bytes32 donID =
        0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000;

    // State variable to store the returned character information
    string public TreasuryYield;

    /**
     * @notice Initializes the contract with the Chainlink router address and sets the contract owner
     */
    constructor() FunctionsClient(router) ConfirmedOwner(msg.sender) {}

    /**
     * @notice Sends an HTTP request for Treasury yield information
     * @param subscriptionId The ID for the Chainlink subscription
     * @param args The arguments to pass to the HTTP request
     * @return requestId The ID of the request
     */
    function sendRequest(
        uint64 subscriptionId,
        string[] calldata args
        
    ) external onlyOwner returns (bytes32 requestId) {
        FunctionsRequest.Request memory req;
        req.initializeRequestForInlineJavaScript(source); // Initialize the request with JS code
        if (args.length > 0) req.setArgs(args); // Set the arguments for the request

        
       
        // Send the request and store the request ID
        s_lastRequestId = _sendRequest(
            req.encodeCBOR(),
            subscriptionId,
            gasLimit,
            donID
        );

        return s_lastRequestId;
    }

    /**
     * @notice Callback function for fulfilling a request
     * @param requestId The ID of the request to fulfill
     * @param response The HTTP response data
     * @param err Any errors from the Functions request
     */
    function fulfillRequest(
        bytes32 requestId,
        bytes memory response,
        bytes memory err
    ) internal override {
        if (s_lastRequestId != requestId) {
            revert UnexpectedRequestID(requestId); // Check if request IDs match
        }
        // Update the contract's state variables with the response and any errors
        s_lastResponse = response;
        TreasuryYield = string(response);
        s_lastError = err;

        // Emit an event to log the response
        emit Response(requestId, TreasuryYield, s_lastResponse, s_lastError);
    }
}
